// Code generated by MockGen. DO NOT EDIT.
// Source: distributor.go

// Package server is a generated GoMock package.
package server

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDistributor is a mock of Distributor interface.
type MockDistributor struct {
	ctrl     *gomock.Controller
	recorder *MockDistributorMockRecorder
}

// MockDistributorMockRecorder is the mock recorder for MockDistributor.
type MockDistributorMockRecorder struct {
	mock *MockDistributor
}

// NewMockDistributor creates a new mock instance.
func NewMockDistributor(ctrl *gomock.Controller) *MockDistributor {
	mock := &MockDistributor{ctrl: ctrl}
	mock.recorder = &MockDistributorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributor) EXPECT() *MockDistributorMockRecorder {
	return m.recorder
}

// GetTopicOwner mocks base method.
func (m *MockDistributor) GetTopicOwner(topic string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicOwner", topic)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicOwner indicates an expected call of GetTopicOwner.
func (mr *MockDistributorMockRecorder) GetTopicOwner(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicOwner", reflect.TypeOf((*MockDistributor)(nil).GetTopicOwner), topic)
}
