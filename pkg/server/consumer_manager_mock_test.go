// Code generated by MockGen. DO NOT EDIT.
// Source: consumer_manager.go

// Package server is a generated GoMock package.
package server

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConsumerManager is a mock of ConsumerManager interface.
type MockConsumerManager struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerManagerMockRecorder
}

// MockConsumerManagerMockRecorder is the mock recorder for MockConsumerManager.
type MockConsumerManagerMockRecorder struct {
	mock *MockConsumerManager
}

// NewMockConsumerManager creates a new mock instance.
func NewMockConsumerManager(ctrl *gomock.Controller) *MockConsumerManager {
	mock := &MockConsumerManager{ctrl: ctrl}
	mock.recorder = &MockConsumerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerManager) EXPECT() *MockConsumerManagerMockRecorder {
	return m.recorder
}

// GetOffset mocks base method.
func (m *MockConsumerManager) GetOffset(group, topic string, reqID int64) (int64, func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffset", group, topic, reqID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(func())
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOffset indicates an expected call of GetOffset.
func (mr *MockConsumerManagerMockRecorder) GetOffset(group, topic, reqID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffset", reflect.TypeOf((*MockConsumerManager)(nil).GetOffset), group, topic, reqID)
}

// SetOffset mocks base method.
func (m *MockConsumerManager) SetOffset(group, topic string, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOffset", group, topic, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOffset indicates an expected call of SetOffset.
func (mr *MockConsumerManagerMockRecorder) SetOffset(group, topic, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOffset", reflect.TypeOf((*MockConsumerManager)(nil).SetOffset), group, topic, id)
}
