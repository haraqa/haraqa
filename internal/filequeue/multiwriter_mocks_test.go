// Code generated by MockGen. DO NOT EDIT.
// Source: multiwriter.go

// Package filequeue is a generated GoMock package.
package filequeue

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWriteAtCloser is a mock of WriteAtCloser interface.
type MockWriteAtCloser struct {
	ctrl     *gomock.Controller
	recorder *MockWriteAtCloserMockRecorder
}

// MockWriteAtCloserMockRecorder is the mock recorder for MockWriteAtCloser.
type MockWriteAtCloserMockRecorder struct {
	mock *MockWriteAtCloser
}

// NewMockWriteAtCloser creates a new mock instance.
func NewMockWriteAtCloser(ctrl *gomock.Controller) *MockWriteAtCloser {
	mock := &MockWriteAtCloser{ctrl: ctrl}
	mock.recorder = &MockWriteAtCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteAtCloser) EXPECT() *MockWriteAtCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWriteAtCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWriteAtCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriteAtCloser)(nil).Close))
}

// WriteAt mocks base method.
func (m *MockWriteAtCloser) WriteAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt.
func (mr *MockWriteAtCloserMockRecorder) WriteAt(p, off interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockWriteAtCloser)(nil).WriteAt), p, off)
}
